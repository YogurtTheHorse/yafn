architecture yafn {
	memory:
		range data_mem [0x0000..0xff] {
			cell = 2;
			endianess = little-endian;
			granularity = 0;
		}

		range constants [0x0000..0xffff] {
			cell = 2;
			endianess = little-endian;
			granularity = 0;
		}

		range code [0x00..0xff] {
			cell = 8;
			endianess = little-endian;
			granularity = 0;
		}

	instructions:
		encode imm8 field = immediate[8] data;
		encode imm16 field = immediate[16] data;

		encode mem_off field = immediate[8] offset;

		instruction nop = { 0000, 0000 };
		
		instruction push_constant08 = { 0000, 0001, imm8 as value };
		instruction push_constant16 = { 0000, 0010, imm16 as value };

		instruction push_from_mem08 = { 0000, 0011, mem_off as off };
		instruction push_from_mem16 = { 0000, 0100, mem_off as off };

		instruction pop = { 0000, 0101 }; 
		instruction write08 = { 0000, 0110 }; 
		instruction write16 = { 0000, 0111 }; 
		instruction add = { 000000 } {
			let a = stack[data_mem[0xff]++];
			let b = stack[data_mem[0xff]++];
			stack[data_mem[0xff]--] = a + b;

			pop();
		}

	mnemonics:
		format plain2 is "{1}";


}